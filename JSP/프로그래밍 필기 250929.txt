JSP)
1. 스크립트 태그	|
2. 디렉티브 태그	|
3. 액션 태그	|
4. 내장 객체		☆
5. 홈 태그			☆
6. 파일 업로드		☆
7. 유효성 검사
8. 다국어 처리
9. 예외 처리
10. 필터			☆
11. 세션			☆
12. 쿠키			☆


JSP는 10월 2일까지.

스크립트 태그에는 3가지가 있다.

선언문		<%!	%>	자바변수나 메소드를 정의하는 데 사용한다
스크립틀릿		<%	%>	자바 로직 코드를 작성하는데 사용한다
표현문		<%=	%>	변수 계산식 메소드 호출결과를 문자열형태로 출력하는데 사용한다

JSP는 html처럼 생겻고 화면 찍어내는데 특화되어 잇음
servlet은 doget~ dopost 이런거 쓰는거임

느낌표가 잇으면 선언 없으면 그냥코딩
html은 클라이언트에서 동작하지만 JSP는 서버에서 동작하며 html text를 응답으로 준다(클라이언트에서 돌아가는건 java script만)
JSP가 컴파일 되면 servlet이 되어용☆(중요)	->	그럼 서블릿이 뭐냐? was에서 쓰는 ?@?@


스크립틀릿 태그란?

자바코드로 이루어진 로직부분. <% %> 오렌지 열고닫고
메소드의 지역변수, 코딩블록이라고 할 수있다
이 안에 태그도 찍을 수 있다.
찍는법은 "" 안에 <> 넣으면댐
out.println(i + "<br>");이렇게하면 댐


표현문

세미콜론으로 종료하는거 아님

옛날에 쓰던거라 지금은 안써도 알아두면 좋음



3장. 디렉티브 태그(page, include, taglib)


page 디렉티브 태그.

language	contentType	pageEncoding 	import	
sesstion	buffer	autoFlush	isThreadSafe	info 등등...

검색하면 다나옴	import contentType정도만 알면 될거임

**MIME 타입 (Media Type, Content-Type)**은 인터넷을 통해 전송되는 파일이나 데이터의 형식을 나타내기 위한 식별자입니다
MIME 타입은 일반적으로 슬래시(/)로 구분된 두 부분, 즉 **타입(Type)**과 **서브타입(Subtype)**으로 구성됩니다.

image/	jpeg, png, gif, svg+xml 이런느낌

pageEncoding이란?
**pageEncoding**은 JSP (JavaServer Pages) 파일 자체의 문자 인코딩(Character Encoding)을 지정하는 속성입니다.

import는 왠만하면 위쪽으로 올리는게 좋음

info는 설명임

errorPage는 에러가 낫을때 지정한 페이지로 이동시킴
<%@ page errorPage="page_errorPage_error.jsp"%>	(에러가 낫을때 page_errorPage_error.jsp 로 이동시킨다는 의미)


include 디렉티브 태그란?

<%@ include file="include01_header.jsp"%>하면 다른 jsp를 포함하는 페이지가 됨(특정페이지를 바디로 하고 인클루드로 메뉴페이지같은거 넣으면 좋겟지?)
근데 include할때 가져가는 페이지의 헤드나 바디를 지워주는게 좋음. contentType랑 내용만 남겨놓고 싹 지우기
왜냐면 헤드 바디가 또 생겨버리면 에러가 날 수 있음


taglib 디렉티브태그란?		(JSTL/EL 이거모르면 간첩)

오렌지 제거할수 잇는거임
근데 톰캣에 jstl이 없어서 외부에서 가져와야한다

<%@ taglib prefix="c" uri="jakarta.tags.core"%>
<%@ taglib prefix="functions" uri="jakarta.tags.functions"%>
<%@ taglib prefix="fmt" uri="jakarta.tags.fmt"%>				이 3개를 많이 씀. prefix= 뒤에 잇는건 내가 알아서 줄여 쓸수 잇음
taglib 쓰는이유? 오렌지 제거하려고 	오렌지 제거하는 이유?	에러 터졋을때 잡기 힘드니까
이거 쓴 다음에 <c 하고 막 쓸수잇음

 <%
                List<Music> musicList = (List<Music>)request.getAttribute("musicList");
                for (int i = 0; i < musicList.size(); i++) {
                    Music music = musicList.get(i);
            %>
이 코드를
            <c:forEach var="music" items="${musicList}">
이렇게 바꿀수 있음

여기서 for를 forEach가, <Music>을 var="music"이, 
List<Music> musicList = (List<Music>)request.getAttribute("musicList");을 items="${musicList}"가 대체한다
3줄을 1줄로 바꾸는 기적
이거에 필요한건 JSTL과 EL	이거모르면 간첩임!!

varStatus는 for 반복문을 대체할수잇음
오렌지는 주석처리가 안댐 주석처리법은 <!--	-->사이의 모든걸  주석화함

포폴 만들때 오렌지 쓰지말고 만들어야대~

Context: 문맥
ContextPath란?
서버 더블클릭하고 모듈 - 에딧 눌러서 path를 바꾸면 경로(사이트주소)를 바꿀 수 있다.
근데 코드까지 바꿔주는건 아니라서 하드코딩되어잇는걸 유동적으로 바뀔수 있게 만들어놔야한다이
http://	localhost:	8080/		KBS_PROJECT/music_list.melon
프로토콜	서버ip 	포트번호 	c/p
만약 그 에딧에서  KBS_PROJECT말고 / 만 쓰면 디폴트가 된다(http://localhost:8080/만 쳐도 들어가짐
overview에서 port넘버를 80으로 바꾸면 localhost만 쳐도 들어가짐
이것이 ContextPath다!!
         <form id="frm1" action="<%=request.getContextPath() %>/music_write.melon" method="post">
        <form id="frm1" action="${pageContext.request.contextPath()}/music_write.melon" method="post">
                 <form id="frm1" action="<c:url value="/music_write.melon"/> method="post">
contextPath 만드는 3가지 방법임
${}, <c:url />이 핵심

자바에선 커스텀메소드가 오버라이딩, 익셉션이엇고
jsp에선 tag를 커스텀할 수 있음(자바코드 노출시키지 말고 편하게 써라)

커스텀태그 만드는법(스킵)



4장. 액션태그

forward include useBean 등등...<jsp:forward ~~/> 처럼 쓰면 댐
디렉티브태그랑 액션태그 둘다 include가 있음 차이점은 디렉티브는 리퀘스트를 쓰지않고 액션은 씀?

forward는 redirect랑 비슷하게 a로 보낸걸 b에서 돌려주는거임. 차이점은 
redirect는 강제로 경로변경을 하고 외부로도 할수잇단거임
forward는 서버 내부에서 다른서블릿으로 주는거고

jsp:include는 뭐냐?	주로 웹 페이지의 헤더(header), 푸터(footer), 내비게이션 바(navigation bar)와 같이 
모든 페이지에서 공통으로 사용되는 레이아웃 부분을 모듈화하는 데 유용합니다.(옛날코드)

useBean, setProperty, getProperty는 빈만들때 씀
이런 액션태그들은 MVC에선 필요한데 요즘은 거의 안쓴다고 한다

<body>
	<h2>forward 액션 태그</h2>
	<jsp:forward page="forward_date.jsp" />
	<p>-------------------------------
</body>
여긴 forward.jsp인데 주소창은 그대로지만 forward_date.jsp화면이 나온다(원래꺼를 읽다가 포워드 보면 그전꺼는 다 잊고 새창만 만듬)
뮤직만들때 새로고침해도 리스트를 추가 안하게 만든 원리?


include 액션

얘도 forward랑 비슷하게 가지만 흘러가다가 다른 jsp를 띄우고 다시 돌아옴
<h2>include 액션 태그</h2>
	<jsp:include page="include_date.jsp" flush="true" />
	<p>-------------------------------
여기서 액션태그 띄우고 날짜띄우고 ---- 띄움(이거도 옛날소스임)


param 액션

이건 현재 jsp페이지에서 다른 페이지에 정보를 전달하는 태그임
<h3>param 액션 태그</h3>
	<jsp:forward page="param01_data.jsp">
		<jsp:param name="id" value="admin" />
		<jsp:param name="name" value='<%=java.net.URLEncoder.encode("관리자")%>' />
	</jsp:forward>
param 액션(<jsp:param>)**은 JSP의 액션 태그(Action Tag) 중 하나로, 다른 페이지로 데이터(매개변수)를 전달할 때 사용됩니다.
이 태그는 단독으로 사용되지 않고, 데이터를 전달받아 처리할 수 있는 다른 JSP 액션 태그(<jsp:include> 또는 <jsp:forward>) 내부에 포함되어 사용됩니다.


자바빈즈 액션

이걸로 EJB를 만드는데 이건 이제 SPRING FRAME WORK로 바뀜
쓰는법은 속성쓰고 get set 만들어주면 댐
Serializable: 직렬화	이 인터페이스는 클래스가 객체의 상태를 저장하거나 네트워크를 통해 전송할 수 있는 
바이트 스트림으로 변환될 수 있음을 JVM(Java Virtual Machine)에게 알려주는 역할을 합니다.
<jsp:useBean id="date" class="java.util.Date" /> java.util.Date 	(클래스를 쓸거야. 그 이름은 date라고 할게)
forward는 다른 jsp를 부르는거지만
자바빈은 다른 클래스를 부르는거임 
빈을 쓴곳이 컨트롤러가 되고 불러진 클래스를 모델로 볼수 잇다는거임
MVC의 초창기 모델이라고도 할 수 있다
이것도 클래스를 태그처럼 쓰는거고 

이걸 줄여서 <calc:proc> 이렇게 만들어버리면 태그라이브러리임(더편함)

이런건 시험에 안나옴 옛날스토리 알고잇으면 좋으니까 알려주는거


정리.

스크립트 태그 <%! <% <%=는 (선언문, 스크립틀릿, 표현식)	이건 오렌지라서 다 jstl로 바뀜
디렉티브태그 <%@ 는 (page, include, taglib), JSTL/EL은 <c <func <fmt ${ }, ContextPath는 경로바꾸는거(하드코딩하지말자)
액션태그 <jsp:	이건 MVC가 나오면서 거의 사라짐


☆=====================================================☆
내장 객체 ☆

페이지의 흐름을 web flow라고 함
근데 웹페이지는 한번 통신하고 응답을 하면 거기서 끊김(데이터와 전력 절약)
그렇다면 어떻게 이전의 정보를 다른페이지에서 조회할 수 있는가?에 대한 답이 내장 객체임
웹개발자다 하면 이걸 이해하고 있어야 성숙햇다고 볼수 잇음

내장객체는 JSP페이지에서 사용할 수 있도록 JSP 컨테이너에 미리 정의된 객체

request: 웹 브라우저의 http 요청정보를 저장	<->	response: 웹 브라우저의 응답정보를 저장함		☆
이 두가지가 한 사이클을 이루고 사라짐

out: JSP페이지에 출력할 내용을 담고 있는 출력스트림
session: 배울거임																☆
application: 웹 애플리케이션의 콘텍스트 정보 저장(req, resp 사이클이 끊겨도 정보를 유지 like static)	☆
pageContext: JSP페이지 정보 저장
page: JSP페이지 자체
config: JSP 페이지의 설정정보 저장
exception: 예외발생 처리

이런것들을 사용하는 방법은 뒤에 점.찍으면 댐 @@@ex) request. 찍으면 클라이언트ip 얻을 수 있음@@@
걍 이 9개 전부 중요함

attribute = property = 속성
내장객체에도 getter setter가 준비되어 있다.

컨테이너는 주머니를 생각하면 댐

속성처리 메소드의 종류
request session application pageContext

Application > 		Session > 		Request > 		Page		(>는 큰게 작은걸 포함하는의미)
MVC_PROJECT					요청			음악등록
서버종료까지		20분~4시간	0.01ms		0.003ms	(저장되는 시간)

예를들어
A -> B -> C -> D -> DB 순으로 데이터를 저장할때 
DB에 들어가기 전에 메모리에 저장을 해야한다이
그걸 위해서 a에서 b로 b에서 c로 가면서 정보를 계속 추가하면서 저장하는게
setAttribute이다
request는 forwarding할때 쓰고 session은 로그인로그아웃할때 쓰기 적당함
page는 그림 저장할때?

내장객체 9가지(request response out session application pageContext page config exception)
set/get(Attribute)이 가능한 객체 4가지(request session application page)를 알아야한다~

웹개발은 레고조립임 코딩직접할건 모델에서 if for 배열 컬렉션같은거 밖에 없음
있는걸 잘 활용해야한다~

==============================================================

request엔 html처럼 헤더와 바디가 있다(보통 쿠키는 헤더에 있음)

request.get+(RemoteAddr, ContentLength...등 여러 메소드가 있다

☆복습 내장객체는 9가지가 존재하고
내장객체 9개중에 속성(정보)을 공유할 수 있는 객체 4가지: pageContext -> request -> session -> application ☆


response 내장 객체
요청을 처리한 결과를 서버에서 웹 브라우저로 전달하는 정보를 저장
forward와 redirect의 차이는
forward는 클 -> a -> b -> 클
redirect는 클 -> a-> 클 -> b -> 클
즉 포워드는 a가 받고 b로 넘겨주고 응답을 하는데(MVC)		(새로고침하면 a로 감, 내부에서 이동함)
리다이렉트는 a가 강제로 돌려주고 b에 요청을 하게 만듬(form 재전송X)	(새로고침하면 b에 잇음, 외부로도 이동가능)

GET방식과 POST방식의 차이
GET은 	url에 포함되어 전송, 		4096b까지 용량제한(브라우저마다다름), 	빠름, 	보안없음
POST는 	http헤더속에 감춰서 전송, 	용량제한X(사실있음),				 느림, 보안있음


input 태그
type속성의 (text, radio, checkbox, password, hidden, file, button, reset, submit)이 있다.
name, value속성의 텍스트도 있음

hidden 타입
input 태그의 $\text{type="hidden"}$은 사용자에게는 보이지 않지만 폼(Form)이 제출될 때 서버로 함께 데이터를 전송하기 위해 사용되는 숨겨진 입력 필드입니다.
이 필드는 웹 페이지 화면에는 렌더링되지 않으며, 사용자가 직접 상호작용하거나 값을 변경할 수 없습니다.
사용자에게 숨겨져 보이지 않을 뿐, HTML 소스 보기나 브라우저의 개발자 도구를 통해 누구나 값을 확인하고 수정할 수 있습니다.
따라서 hidden 필드를 보안 수단으로 사용해서는 안 되며, 비밀번호나 민감한 인증 정보 등은 절대 이 필드에 담아 전송하면 안 됩니다. 
중요한 데이터는 항상 서버 측에서 한 번 더 검증해야 합니다.

실습
hidden이랑 impl 써보기

hidden은 보기엔 숨겨져있지만 개발자도구로 볼수잇어서 취약함!!
보안에 신경쓰려면 impl식(session.set,getAttribute)으로 하는게 좋다


hidden vs 공유객체
hidden은 from에 hidden type으로 전달(페이지 안에서 전달한다.서버에 저장안함)한다. 고객이 볼수잇음
그러나 내장객체 session에 set을 하면 고객이 못보게 서버에서 처리하고 보낼수 잇음
이 set을 오렌지안에 getAttribute해도 되고 ${sessionScope.파일명}으로 얻을수도 잇음