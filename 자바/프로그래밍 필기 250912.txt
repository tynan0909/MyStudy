람다식은 식만 만들고 계산은 따로함


27-2 정의되어 있는 함수형 인터페이스

Predicate<T>

Supplier<T>

Consumer<T>

Function<T,R>


28-2 메소드 참조

Arrays.asList 이거로 리스트 만들 수 있음
Collections.reverse(); 이거는 역순으로 바꿈
:: 이건 메소드 참조임

생성자 참조 

Optional 클래스 - if문 null체크를 줄일 수 있음(개체를 감싼게 Optional)

람다식은 짧아서 간단해 좋지만 디버깅이 어렵다. 그래도 null체크 대신 Optional정도는 쓰는게 좋을것?
OptionalMap을 사용하면 활용범위가 넓다


29장 스트림

stream -> filter -> sorted -> distinct -> map -> collect 
(빅데이터 스타일) E T L Extract Transfer Load

정수기 필터라고 생각하면 됨

초기랑 끝이 중요하고 중간은 알아서?
.filter(n -> n%2 ==1) 이건 n을 2로나눠서 1이 남는 숫자만 남긴다

스트림에 .parallel() 이거쓰면 병렬로 작동(더빠르다)


31장 날짜와 시간

Data는 언제나 끝에 생성일시, 생성자, 수정일시, 수정자를 놓는다ex) 25/09/12 22:32:11 (n분전) 총12~14자
만약 수정자도 계속 기억하려면 히스토리에 기억해야함

시간 - 몇시간이나 걸리나?
시각 - 지금 시각이 몇시냐?

일시 - 일, 시각
UTC는 영국 그리니치 천문대 기준
한국,도쿄는 여기에 9시간을 더한다(UTC+9)
ZoneId 쓰면 자바가 알아서 시간 더해줌

32장 I/O스트림

버퍼쓰면 반드시 버퍼 길이만큼만 쓰게(write) 해야함 안그러면 깨짐
Reader Writer가 들어가면 문자로 주고받겠다
Stream이 들어가있으면 바이트로 주고받겠다

NIO(NEW I/O)
이건 양방향


34장 쓰레드

공유자원 쓰레드 쓸때 synchronized를 해야함(동시에 뭔가 해서 명령이 누락되는걸 막는다)(내가 끝나면 너가 써라)
메소드 안에서 싱크로나이즈 쓸수도 있음

Executors는 멀티쓰레드를 쓸 때 쓰레드풀에서 꺼내 쓸 수 있게 함?
